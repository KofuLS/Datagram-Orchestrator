name: Datagram 24/7 Multi-Node Runner

on:
  workflow_dispatch:
    inputs:
      force_restart:
        description: 'Force restart all nodes'
        required: false
        type: boolean
        default: false
  
  schedule:
    - cron: '0 */5 * * *'
  
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/datagram-runner.yml'

env:
  NODE_VERSION: 'latest'
  RESTART_DELAY: 10
  MAX_RETRIES: 100

concurrency:
  group: datagram-${{ github.ref }}-${{ github.run_number }}
  cancel-in-progress: false

jobs:
  # ============================================
  # JOB 1: Setup Matrix from Secret
  # ============================================
  setup-matrix:
    name: 🔧 Setup Multi-Account Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.parse.outputs.matrix }}
      total: ${{ steps.parse.outputs.total }}
      timestamp: ${{ steps.parse.outputs.timestamp }}
    
    steps:
      - name: Parse API Keys
        id: parse
        run: |
          echo "🔍 Parsing DATAGRAM_API_KEYS secret..."
          
          KEYS='${{ secrets.DATAGRAM_API_KEYS }}'
          
          if [ -z "$KEYS" ]; then
            echo "❌ ERROR: DATAGRAM_API_KEYS secret is empty!"
            exit 1
          fi
          
          if [[ "$KEYS" == "["* ]]; then
            KEYS_ARRAY="$KEYS"
          else
            KEYS_ARRAY=$(echo "$KEYS" | tr ',' '\n' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          
          COUNT=$(echo "$KEYS_ARRAY" | jq 'length')
          
          if [ "$COUNT" -eq 0 ]; then
            echo "❌ ERROR: No valid API keys found!"
            exit 1
          fi
          
          MATRIX=$(jq -n --argjson keys "$KEYS_ARRAY" '{
            include: [
              range(0; $keys | length) | {
                index: . + 1,
                api_key: $keys[.]
              }
            ]
          }')
          
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "total=$COUNT" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          
          echo "✅ Successfully parsed $COUNT API keys"
          
      - name: Validate Matrix
        run: |
          echo "📊 Matrix Configuration:"
          echo '${{ steps.parse.outputs.matrix }}' | jq .

  # ============================================
  # JOB 2: Run Datagram Nodes (Parallel)
  # ============================================
  run-nodes:
    name: 🚀 Node #${{ matrix.index }}
    needs: setup-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 350
    
    strategy:
      max-parallel: 50
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    
    steps:
      - name: 🖥️ System Info
        run: |
          echo "════════════════════════════════════════════════"
          echo "🚀 DATAGRAM NODE STARTUP"
          echo "════════════════════════════════════════════════"
          echo "📍 Node Index    : ${{ matrix.index }} / ${{ needs.setup-matrix.outputs.total }}"
          echo "⏰ Started at    : ${{ needs.setup-matrix.outputs.timestamp }}"
          echo "🔑 API Key       : ${API_KEY:0:8}...${API_KEY: -6}"
          echo "════════════════════════════════════════════════"
        env:
          API_KEY: ${{ matrix.api_key }}

      - name: 📦 Install Datagram CLI
        run: |
          echo "📥 Downloading Datagram CLI..."
          
          # --- PERBAIKAN DI SINI ---
          # Menggunakan URL /latest/ dengan nama file yang benar dari rilis terbaru
          DOWNLOAD_URL="https://github.com/Datagram-Group/datagram-cli-release/releases/latest/download/datagram-cli-x86_64-unknown-linux-musl"
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Download file dan langsung simpan sebagai 'datagram-cli'
            if wget -q --show-progress "$DOWNLOAD_URL" -O datagram-cli; then
              echo "✅ Download successful"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "⚠️ Download failed, retry $RETRY_COUNT/$MAX_RETRIES..."
                sleep 5
              else
                echo "❌ Download failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
          
          sudo mv datagram-cli /usr/local/bin/datagram-cli
          sudo chmod +x /usr/local/bin/datagram-cli
          
          if command -v datagram-cli &> /dev/null; then
            echo "✅ Datagram CLI installed successfully"
            datagram-cli --version 2>/dev/null || echo "Version: latest"
          else
            echo "❌ Installation verification failed"
            exit 1
          fi

      - name: 🚀 Start Node with Auto-Restart
        # Sisa dari file ini tidak perlu diubah karena logikanya sudah benar
        run: |
          echo "🎯 Starting Datagram Node #${{ matrix.index }}..."
          cleanup() {
            echo ""
            echo "═══════════════════════════════════════════════"
            echo "⚠️  SHUTDOWN SIGNAL RECEIVED"
            echo "═══════════════════════════════════════════════"
            echo "⏰ Time: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "🛑 Stopping node gracefully..."
            pkill -TERM -f datagram-cli || true
            sleep 5
            pkill -KILL -f datagram-cli || true
            echo "✅ Node stopped"
            echo "═══════════════════════════════════════════════"
            exit 0
          }
          trap cleanup SIGINT SIGTERM SIGHUP
          RESTART_COUNT=0
          while [ $RESTART_COUNT -lt $MAX_RETRIES ]; do
            echo ""
            echo "╔═══════════════════════════════════════════════╗"
            echo "║         ITERATION #$((RESTART_COUNT + 1)) of $MAX_RETRIES             ║"
            echo "╚═══════════════════════════════════════════════╝"
            echo "⏰ Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "▶️ Starting datagram-cli..."
            timeout 5h datagram-cli run -- -key "$API_KEY" 2>&1 | while IFS= read -r line; do
              echo "[Node #${{ matrix.index }}] $line"
            done || {
              EXIT_CODE=$?
              echo "───────────────────────────────────────────────"
              echo "⚠️ Node stopped with exit code: $EXIT_CODE"
              case $EXIT_CODE in
                124) echo "⏱️ Timeout reached (expected for restart)";;
                0) echo "✅ Clean exit";;
                *) echo "❌ Unexpected exit. Waiting 30s..."; sleep 30;;
              esac
            }
            ((RESTART_COUNT++))
            if [ $RESTART_COUNT -lt $MAX_RETRIES ]; then
              echo ""
              echo "⏳ Cooldown period: $RESTART_DELAY seconds..."
              sleep $RESTART_DELAY
            fi
          done
          echo "🛑 MAX RESTART LIMIT REACHED"
        env:
          API_KEY: ${{ matrix.api_key }}
          MAX_RETRIES: ${{ env.MAX_RETRIES }}
          RESTART_DELAY: ${{ env.RESTART_DELAY }}
  
  # ============================================
  # JOB 3: Health Monitor
  # ============================================
  monitor:
    name: 📊 Health Monitor
    needs: [setup-matrix, run-nodes]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Report
        run: |
          echo "📊 DATAGRAM NODES HEALTH REPORT"
          echo "═══════════════════════════════════════════════"
          echo "🔢 Total Nodes   : ${{ needs.setup-matrix.outputs.total }}"
          echo "✅ Success       : ${{ needs.run-nodes.result == 'success' }}"
          echo "❌ Failure       : ${{ needs.run-nodes.result == 'failure' }}"
          echo "⚠️ Cancelled     : ${{ needs.run-nodes.result == 'cancelled' }}"
          echo "───────────────────────────────────────────────"
          if [ "${{ needs.run-nodes.result }}" == "success" ]; then
            echo "✅ All nodes completed their cycle successfully."
          else
            echo "❌ Some nodes failed or were cancelled. Check logs for details."
          fi
